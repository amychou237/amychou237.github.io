{"meta":{"title":"AmyChou","subtitle":null,"description":null,"author":"Amy Chou","url":"http://yoursite.com","root":"/"},"posts":[{"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}],"title":"Dockerfile","date":"2020/03/30","text":"Dockerfile介紹 Dockerfile ENV & ARG 有什麼不同？ ARG：指定變數。ENV：可指定構建時的環境變數，可接收ARG指定之變數。 E.g. ARG version= 3.26.0 ENV PATH= /version_path/${version} PS.可用來做版本號變更。 Dockerfile ENTRYPOINT & CMD & RUN 有什麼不同？ ENTRYPOINT：指定命令(command)、參數。CMD：默認命令、參數，若執行時帶其他參數將被覆蓋。RUN：用來執行命令(command)，EX：安裝、拉取、呼叫(echo)…etc。 PS.使用括弧 CMD [“echo”，”hello world!”](EXEC 型式)，Dockerfile，較靈活，變數可以較容易維護。 Dockerfile COPY & ADD 有什麼不同？ COPY：可用來複製地端機器檔案至容器內的資料夾。ADD：可用來複製地端機器檔案/或是url遠端檔(通常會是壓縮檔)至容器內並解壓縮檔案。 PS.一般使用COPY+RUN(解壓縮)會比使用ADD行為上可控，因ADD內部處理行為較不透明，且會建置較肥的image檔。 PS.一般使用ADD為遠程檔案解壓縮。 (1.)本機檔案： (a.) ADD ./index.tar /usr/local/apache2/htdocs (b.) WORKDIR /usr/local/apache2/htdocs COPY ./index.tar ./ RUN tar -zxvf ./index.tar RUN rm -f ./ (2.)遠端檔案： (a.) FROM httpd EXPOSE 80 WORKDIR /usr/local/apache2/htdocs ADD http://172.20.22.75:85/ ./index.html RUN chmod 777 ./index.html (b.) FROM httpd EXPOSE 80 WORKDIR /usr/local/apache2/htdocs RUN curl http://172.20.22.75:85/ ./index.html RUN chmod 777 ./index.html Build一個自定義映像檔，Web畫面上顯示現在時間 (1.)Dockerfile FROM httpd #base_image使用apache server WORKDIR ./ #工作目錄、容器進入的位置。 EXPOSE 80 #對使用image的人說明容器內服務的port號，無法用來指定容器對外port號，EXPOSE後可被其他容器link。 COPY index.html /usr/local/apache2/htdocs/ #複製本機index網頁至apache伺服器內。 (2.)index.html function ShowTime(){ document.getElementById('showbox').innerHTML = new Date(); setTimeout('ShowTime()',1000); } (3.)Docker Build docker build -t httpd_clock . (4.)Run 在85port對應到容器的80port docker run -d -p 85:80 –name httpd_clock httpd_clock -p (Publish) 將容器端口映射到外部，同時也會開啟EXPOSE，與其他容器link的功能。","permalink":"http://yoursite.com/2020/03/30/Dockerfile/","photos":["https://amychou237.github.io/images/000003.png"]},{"tags":[],"title":"My Gallery","date":"2020/02/25","text":"","permalink":"http://yoursite.com/2020/02/25/My-Gallery/","photos":[]},{"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}],"title":"hexo_blog","date":"2020/02/13","text":"新建hexo blogwindows前置安裝 Node.js (版本需不低於 8.10，建議使用 Node.js 10.0 及以上版本) Git 安裝gitHub+hexoHexo官方文檔 $ npm install -g hexo-cli 建置使用者資料夾e.g. D:\\ username 在 username 底下初始化blog $ hexo init $ cd $ npm install hexo指令 (皆在blog路徑底下執行指令) $ hexo new articlename 新增文章頁面 $hexo clean 清除快取、已生成靜態檔 $ hexo s s= server (啟動伺服器，可預覽網站，文件更動儲存會自動更新 http://localhost:4000/) $ hexo g -d g= generate (生成靜態檔案) d= deploy (部署網站) $ git log 查看推版紀錄 markdown 軟體推薦HackMD 查詢git 遠端網址 $ git remote -v 建立layout頁面 $hexo new photo “My Gallery” photo= 建置的layout","permalink":"http://yoursite.com/2020/02/13/hexo2/","photos":["https://amychou237.github.io/images/000006.png"]},{"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}],"title":"hexo 問題解決","date":"2020/02/12","text":"修復 hexo 模組缺失 發現node_modules下沒有hexo-server模組重新安裝 hexo-deployer-git $ npm install hexo-deployer-git –save 發現git模組還是沒被安裝，重新安裝nodejs組件 $ npm install 修復(modified content, untracked content)問題 刪除版本庫中的資料夾重新更新。 $ git rm -rf –cached D:/username/blog/themes/hexo-theme-huhu $ git add –all $ git commit -m “update all” 修復fatal: LF would be replaced by CRLF問題使用git推版本時發生以下問題 發現因GIT 源自 UNIX：預設是使用 LF，Windows (CRLF)與 UNIX (LF) 兩個平台的換行符號不相同，所以在 Windows 運行時須進行轉換。 取消轉換指令在C槽調整git之設定檔 C:\\Users\\username\\ .gitconfig 加入兩項設定 [core]autocrlf = falsesafecrlf = true","permalink":"http://yoursite.com/2020/02/12/hexo/","photos":["https://amychou237.github.io/images/000006.png"]},{"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}],"title":"Gitea","date":"2020/02/12","text":"Gitea 建置安裝拉取官方新版imgae $docker pull gitea/gitea:latest 建立本地Gitea資料夾 $sudo mkdir -p /var/lib/gitea 運行Gitea容器 $docker run -d –name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest 綁定LDAP每天會發生帳號被停用發現每天定期更新及健康檢查時，綁定之LDAP帳號會被停用。 更改本地 /var/lib/gitea/gitea/conf/app.ini 之檔案 增加以下設置 同步外部用戶數據（僅支持LDAP用戶同步）選項 [cron.sync_external_users];啟動服務器時同步外部用戶數據（默認為false）RUN_AT_START = falseSCHEDULE = @every 24h (可先更改時間為10m確認是否設置成功);創建新用戶，更新現有用戶數據並禁用不再位於外部源中的用戶（默認為true）UPDATE_EXISTING = false","permalink":"http://yoursite.com/2020/02/12/Gitea/","photos":["https://amychou237.github.io/images/000006.png"]},{"tags":[{"name":"Account","slug":"Account","permalink":"http://yoursite.com/tags/Account/"}],"title":"LDAP","date":"2020/02/11","text":"LDAP (輕型目錄存取協定-Lightweight Directory Access Protocol)Docker 版本 open-ldap 一種類似電話簿的目錄服務，用來整合查找人員帳號資訊，以樹狀架構存放人員帳密、通訊錄…等資訊，不同於資料庫用來讀寫，專注於讀的功能上的使用。 LDAP存儲規則 DN(Distinguished Name)：區分名(識別名稱)。 DC(Domain Component)：網域元件(區域網路)。 CN(Common Name)：用戶/服務器名(使用者名稱)。 OU(Organization Unit)： 組織單元，最多可有四級(組織單位)。","permalink":"http://yoursite.com/2020/02/11/LDAP/","photos":["https://securecompliance.co/wp-content/uploads/2018/03/Linux.jpg"]},{"tags":[{"name":"Info","slug":"Info","permalink":"http://yoursite.com/tags/Info/"}],"title":"port knocking","date":"2020/01/14","text":"port knocking 透過多一層port防護阻擋駭客攻擊，需透過特定順序port暗號，才能開啟特定port連線。 下載 knock apt updateapt install knockd iptables-persistent 配置更改 /etc/knockd.conf [options] UseSyslog Interface = ens18[SSH] sequence = 1000,2000,3000 seq_timeout = 15 tcpflags = syn start_command = /sbin/iptables -I INPUT -s %IP% -p tcp –dport 22 -j ACCEPT stop_command = /sbin/iptables -D INPUT -s %IP% -p tcp –dport 22 -j ACCEPT cmd_timeout = 20 配置 /etc/default/knockd START_KNOCKD=1 配置 /etc/systemd/system/knockd.service 服務腳本內設定 [Unit]Description=Port-Knock DaemonAfter=network.targetRequires=network.targetDocumentation=man:knockd(1)[Service]EnvironmentFile=-/etc/default/knockdExecStartPre=/usr/bin/sleep 1ExecStart=/usr/sbin/knockd $KNOCKD_OPTSExecReload=/bin/kill -HUP $MAINPIDKillMode=mixedRestart=alwaysSuccessExitStatus=0 2 15ProtectSystem=fullCapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN[Install]WantedBy=multi-user.target 重新載入服務systemctl daemon-reload 設定開機自啟動systemctl enable –now knockd.service","permalink":"http://yoursite.com/2020/01/14/port%20knocking/","photos":["https://amychou237.github.io/images/000011.jpg"]},{"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}],"title":"Docker2","date":"2019/11/19","text":"部署容器權限問題將使用者新增至Docker群組，若無Docker群組，則先創建群組。 1.查看有無docker群組 1cat /etc/group | grep docker 2.新增 USER_NAME 至docker群組 1sudo usermod -aG docker USER_NAME 3.確認群組成員是否新增成功 1cat /etc/group | grep docker 4.重啟Docker服務 1sudo systemctl restart docker 刪除image使用grape_image_id移除image docker images -a | grep “pattern” | awk ‘{print $3}’ | xargs docker rmi","permalink":"http://yoursite.com/2019/11/19/Docker2/","photos":["https://amychou237.github.io/images/000003.png"]},{"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"title":"redis","date":"2019/09/02","text":"redis aof 檔修復 備份cp appendonly.aof appendonly.aof.bak 修復redis-check-aof –fix appendonly.aof pip InportError","permalink":"http://yoursite.com/2019/09/02/redis/","photos":["https://amychou237.github.io/images/000010.png"]},{"tags":[{"name":"Docker-Zookeeper","slug":"Docker-Zookeeper","permalink":"http://yoursite.com/tags/Docker-Zookeeper/"}],"title":"zookeeper 日誌檔為零解決方法","date":"2019/08/30","text":"檢視日誌檔 zk異常日誌刪除zk /datalog/version-2/ 下log檔案大小為零，造成container無法開啟。 循環日誌設定 vim /etc/docker/daemon.json “","permalink":"http://yoursite.com/2019/08/30/zookeep%20log%E7%82%BA%E9%9B%B6/","photos":["https://amychou237.github.io/images/000008.png"]},{"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"title":"Filebeat install","date":"2019/06/26","text":"Linux Ubuntu 16.04 下載 Filebeatfilebeat 檔案下載curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-amd64.deb curl(取得網頁內容) -O (將網頁特定檔案存至本機) -L (可將地址強制重新定向) 安裝filebeat1sudo dpkg -i filebeat-7.2.0-amd64.deb dpkg (Debian Linux用來安裝、創建安裝檔的工具) -i (安裝軟體) -r (刪除軟體) -P (刪除軟體+配置文件) 設定開機自啟filebeat將啟動服務的語法加入/etc/rc.local /etc/init.d/filebeat start or sudo service filebeat start 1systemctl enable filebeat.service (設定服務開機自啟動) 參考參考 查看filebeat狀態1service filebeat status 移除filebeat1dpkg-deb -I filebeat-7.2.0-amd64.deb ***以Package name移除安裝1dpkg -r filebeat ***查看安裝的deb1dpkg -l | grep filebeat rpm 檔轉 deb 檔下載 alien 轉檔套件 1sudo apt-get install alien 轉檔1alien -d filebeat.rpm 1sudo dpkg -i filebeat-7.2.0-amd64.deb CenOS 查看service版本rpm用法參考 1rpm -qi PACKAGE_NAME","permalink":"http://yoursite.com/2019/06/26/Filebeat%20install/","photos":["https://amychou237.github.io/images/000006.png"]},{"tags":[{"name":"Docker-ELK","slug":"Docker-ELK","permalink":"http://yoursite.com/tags/Docker-ELK/"}],"title":"Grafana &　ELK","date":"2019/05/13","text":"簡介監控平台方案 Grafana+Influxdb+Telegraf [T]：Telegraf[I]：Influxdb[C]：Chronograf[K]：Kapacitor Grafana 可用來蒐集、顯示自訂義的儀表板，上面有許多plugin，可代替kibana使用，但不支援全文數據查詢，而主要用來分析CPU、內存、磁盤、I/O等的利用率。Grafana自帶警示系統，可自行設定儀錶版規則，當達到警示條件則可觸發警示到指定位置(e.g.Email、Teams、Slack…etc)。 Grafana 安裝docker run -d -i -p 3000:3000 grafana/grafana Influxdb 安裝docker run -d -p 8083:8083 -p 8086:8086 –expose 8090 –expose 8099 –name influxsrv tutum/influxdb –influxdb 建立資料庫 1.進入資料庫 influx 2.查詢現有資料庫 show databases 3.建立新資料庫 create database name –api新增資料庫 curl -XPOST ‘http://ip:8086/query’ –data-urlencode ‘q=CREATE DATABASE “name“‘ telegraf 安裝wget https://dl.influxdata.com/telegraf/releases/telegraf_1.3.5-1_amd64.deb sudo dpkg -i telegraf_1.3.5-1_amd64.deb service telegraf start Docker+ELK 日誌監控軟體透過Filebeat收集、Logstash轉換處理傳入server的log資料，再將所蒐集的log推送給Elasticsearch儲存，最後由Kiabana進行資料圖形化的呈現。 [E]：Elasticsearch[L]：Logstash[K]：Kibana Elasticsearch 安裝 – 蒐尋＆分析docker run -d –name elk-elasticsearch -p 9200:9200 -v /data/elasticsearch:/usr/share/elasticsearch/data –restart=always -e ES_JAVA_OPTS:-Xmx6g -e ES_JAVA_OPTS:-Xms6g elasticsearch:5.3.1 Logstash 安裝 – 數據處理轉發esdocker run -d -v /home/lab08/Docker-ELK/Logstash:/usr/games –name elk-logstash -p 5000:5000 –link elk-redis:redis –link elk-elasticsearch:elasticsearch –restart=always logstash:5.3.1 Kibana 安裝docker run -d –name elk-kibana -p 80:5601 –link elk-elasticsearch:elasticsearch –restart=always kibana:5.3.1 Logstash 管理過濾器Grok Filter -輸入、過濾、輸出 input { …}filter { grok { match => [ “來源欄位”, “Patterns” ] } …}output { …} Grok Patterns 的基本用法是：%{Pattern名稱:欄位名稱:型別} +Packetbeat 網路監控","permalink":"http://yoursite.com/2019/05/13/ELK/","photos":["https://amychou237.github.io/images/000004.png"]},{"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://yoursite.com/tags/Ansible/"}],"title":"Ansible","date":"2019/02/26","text":"簡介Asible 為減少重複性工作的操作，使用Playbook編排任務，為Jason格式的YAML文件，為一種輕量化文件，並透過文件的重複使用，使文件占用資源達到最小化，並利於檢視。 Control Machine (控制) & Managed Node (遠端) 環境： 控制端 須為 python 2.6 以上版本 遠端 須為 python 2.5 以上版本 Windows node ： WinRM、SSH PowerShellUnix-like node： SSH Python Anisble套件安裝 Ubuntu (apt) 安裝 Ansible1$sudo apt-get -y install ansible 設定ansible.cfg(路徑、使用者名稱、SSH金鑰)1$vim ansible.cfg 設定 inventory 檔案路徑1inventory =hosts 遠端使用者名稱1remote_user = user_name 設定遠端hosts(為ansible.cfg預設配置)一般會在 /etc/ansible/hosts ，可copy至自己的資料夾修改。 用[]可將位址做為群組分類，如以下官方文件範例。而一個hostname或ip可屬於多個群組。 [webservers] (群組以括弧表示) alpha.example.org (可為hosname或是ip) beta.example.org 192.168.1.100 192.168.1.110 ansible_host 遠端主機位址ansible_port 遠端埠口ansible_user 遠端使用者名稱ansible_pass 遠端密碼 設定完可在control machine 下 1$ansible all -m ping ansible 模組，可用以下指令查詢 1$ansible-doc -l ansible 常用模組shell win_shell playbook格式ansible迴圈 @使用 {{ item }}跟 with_items的組合來實現類似於一般程式語言中的 For 迴圈概念。 例： - name: add several users user: name: \"{{ item }}\" state: present groups: \"wheel\" with_items: - testuser1 - testuser2使用ansible tags tags可使用在一個或多個task中，也可在roles中使用多個tags。 1.always playbook還提供了一個特殊的tags為always。 作用就是當使用含有tags：always的task時，無論執行哪一個tags，定義有 always 的tags都會執行。 相反的可使用 ansible-playbook 123.yaml --skip-tags configuration 來跳過play中含有 configuration 這個tags的 task。 @ansible mode : handlers 可在執行特定任務(某個Task)時觸發特別任務(handler)，handler中可有多個任務，分別屬於不同的(Task)使用。 當執行 task1 時會觸發 handler1 -hosts:localhost remote_user:root tasks: -name:task1 file:path=/testdir/testfile state=touch(創建文件) notify:handler1 handlers: -name:handler1 file:path=/testdir/handler1 state=touch(創建文件) 若有多個 tasks 需要執行則會將多個 task 執行完畢後才執行觸發的 handlers ，若須在執行完特定 task 後 立刻執行觸發的 handler ，則可在該特定的 task 下 加入 meta: flush_handlers 該特定的 handler執行完後才會繼續執行其餘的task。 @ansible 創建/刪除目錄 path=/testdir/a/b (定義路徑) state:有以下directory(目錄)、touch(文件)、absent(刪除) @ansible命令應用基礎： 語法: ansible [-f forks] [-m module_name] [-a args] -f forks：啟動的併發執行緒數； -m module_name: 要使用的模組； -a args: 模組特有的引數；Command功能：命令模組，預設模組，用於在遠端主機執行命令，缺點：執行的命令中無法使用變數。 ansible-doc -s command name: 在遠端節點執行命令action: commandchdir # 在執行命令之前，先切換到該目錄。creates # 一個檔名，當這個檔案存在，則該命令不執行。executable # 切換shell來執行命令，需要使用命令的絕對路徑。free_form= #要執行的Linux指令，一般使用Ansible的-a引數代替。removes #一個檔名，這個檔案不存在，則該命令不執行。 Ansible 操作做log紀錄修改ansible.cfg下的 log_path = /home/log/ansible.log(自定義)Role將重複使用的task獨立出來，寫成一個role，以供其它的playbook使用。 @ Ansible Open name: Runhosts: linuxserverremote_user: roottasks: name: Open allshell: /Linux/Run_App (指令)register: shell_result (變數)failed_when: “‘FAILED’ in shell_result.stderr” (存入變數中)become: truebecome_user: rootargs: chdir: /Linux/ 測試”test.yml”playbook的語法是否正確ansible-playbook –syntax-check test.yml 成功會出現以下訊息 模擬執行playbookansible-playbook -C test.yml windows 路徑格式Ansible官方","permalink":"http://yoursite.com/2019/02/26/Ansible/","photos":["https://amychou237.github.io/images/000002.png"]},{"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"title":"Telegraf","date":"2019/02/26","text":"簡介Ubuntu (apt) 安裝 Telegraf 1.3.51$wget https://dl.influxdata.com/telegraf/releases/telegraf_1.3.5-1_amd64.deb 1sudo dpkg -i telegraf_1.3.5-1_amd64.deb","permalink":"http://yoursite.com/2019/02/26/telegraf/","photos":["https://amychou237.github.io/images/000009.png"]},{"tags":[{"name":"Docker-InfluxDB","slug":"Docker-InfluxDB","permalink":"http://yoursite.com/tags/Docker-InfluxDB/"}],"title":"influxdb container log刪除","date":"2019/01/01","text":"刪除正在寫入之log。cat /dev/null > container_log_name-json.log 參考","permalink":"http://yoursite.com/2019/01/01/influxdb%20container%20log%E5%88%AA%E9%99%A4/","photos":["https://amychou237.github.io/images/000006.png"]},{"tags":[{"name":"GCP","slug":"GCP","permalink":"http://yoursite.com/tags/GCP/"}],"title":"GCP增加硬碟大小","date":"2019/01/01","text":"GCP增加硬碟大小，online。GCP上編輯更改硬碟大小，將10G改為20G。 若查看硬碟大小沒有更改，執行以下步驟 ↓ 1[lsblk] ：查看硬碟分割狀況;(list block device) ＊裝置和分割區有一個空格1[growpart /dev/sda 1]：擴大分區大小; 參考 1[cat /etc/fstab]：可查看掛載硬碟的格式; 兩種格式的調整方法。 ＊本圖1[resize2fs /dev/sda1]：FOR ext2、ext3、ext4 格式; （此格式可增大和減小） 1[xfs_growfs /dev/sda1]：FOR xfs 格式; (此格式只可增大) 更改後可看見 sda 1已由10G 變為 20G。 參考_擴充硬碟","permalink":"http://yoursite.com/2019/01/01/%E5%A2%9E%E5%8A%A0gcp%E7%A1%AC%E7%A2%9F%E5%A4%A7%E5%B0%8F/","photos":["https://amychou237.github.io/images/000006.png"]},{"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}],"title":"Docker","date":"2018/11/19","text":"rktCoreOS ：為一種輕量的linux作業系統，支援docker、rkt兩種容器管理，以及自己開發的etcd、fleet工具，為CoreOS自行開發的產品。 Docker 安裝 安裝 Docker io1sudo apt-get install -y docker.io –安裝 Docker 17.03版本 1[Docker 17.03](https://releases.rancher.com/install-docker/17.03.sh) 啟動 Docker1sudo service docker start 卸載 Docker1sudo apt-get remove docker docker-engine docker.io 查詢運行中 Docker Container1docker ps 尋找Docker映像檔(image) Docker Hub 1docker search tomcat(image name) 拉取官方映像檔(image)1docker pull tomcat(image name) 搜尋本地映像檔(image)1docker images 1docker images |grep tomcat(image name) 儲存本地映像檔(image)1sudo docker save -o tomcat.tar tomcat:14.04 將儲存的本地映像檔重新載入(image)1sudo docker load -i tomcat.tar 刪除本地映像檔(image)1docker rmi tomcat (image name) ***如果image id 相同可加上tag刪除1docker rmi tomcat:7.0 (image name) 開啟容器(處於停止狀態)1docker start tomcat(container ID) 重啟容器(將運行中容器停止重啟)1docker restart tomcat(container ID) 停止容器1docker stop tomcat(container ID) 進入容器1docker exec -it {name} bash 刪除容器1docker rm -f tomcat (container names or ID) 刪除停止運行的容器1docker rm $(docker ps -a -q) 刪除所有容器(包含運行中)1docker rm $(docker ps -a -q) -f 查詢容器資源使用狀況1docker container stats 查詢所有volume1docker volume ls 創建volume若使用的本機資料夾存有數據，將會隱藏容器內的數據；若使用的本機資料夾為空，將會映射容器內數據。 1docker volume create mydata volume持久化 數據持久化將目前路徑映射到container的data資料夾1docker run -it -v $(pwd)/data:/data tomcat 刪除volume1docker volume rm tomcat(name) 若沒使用的volume會資源，此命令可全刪除1docker volume prune ![image](https://amychou237.github.io/images/delete volume.PNG) 更新Docker 容器參數1docker update --restart=always 容器id docker_update選項docker_restart_policy 1.no 設定exit後不重啟。2.on-failure & on-failure:3(最多重啟3次) container非正常退出(exit cond不等於0，才進行重啟。3.always 容器退出時總是重啟。4.unless-stopped 除了在容器停止(手動或其他方式)時，即使重新啟動Docker守護程序也不會重新啟動容器。 更新Docker 容器名稱1docker rename cos7 newcos7","permalink":"http://yoursite.com/2018/11/19/Docker/","photos":["https://amychou237.github.io/images/000003.png"]},{"tags":[{"name":"Script","slug":"Script","permalink":"http://yoursite.com/tags/Script/"}],"title":"Batch","date":"2018/11/10","text":"註釋REM:: echo:空行 環境變數::呼叫路徑 %~dp0 批次檔所在路徑 %cd% 目前工作路徑 ::呼叫日期 echo %date% ;2019/05/31 週五 ::呼叫時間 echo %time%18:24:21.84 ::切割日期 FOR /F “tokens=1-4 delims=/ “ %%a IN (“%date%”) DO (SET dt=%%a-%%b-%%c) echo %dt% 2019-05-31 tokens=要分割的項目數。delims=以指定分隔的符號來分割%date%這個環境變數。%%a =把第一順位切割的值，給%%a這個變數。dt =自訂變數儲存切割後環境變數值。 Errorlevelif errorlevel 1 goto aif errorlevel 0 goto b :a echo Hello world in a! :b echo Hello world in b! 比較引數 EQU 等於 NEQ 不等於 LSS 小於 LEQ 小於或等於 GTR 大於 GEQ 大於或等於 *** Call:a echo Hello world in a! :b echo call :a echo Hello world in b! pause Type123456789 batch.log type batch.log 123456789 batch.bat","permalink":"http://yoursite.com/2018/11/10/batch/","photos":["https://securecompliance.co/wp-content/uploads/2018/03/Linux.jpg"]},{"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"title":"Linux 常用指令","date":"2018/11/10","text":"vi為Linux預設文書模式，vi有兩種操作模式，分為指令模式（Command）和輸入模式（Insert）。 常用文字操作指令在Linux系統，進入編輯模式有三個指令可以使用： 進入要更改的資料夾後，按下a,i,o可進行編輯。 1[a] ：按下a，會跳至目前選定字元的下一位進行編輯。; 1[i] ：按下i，會在目前選定字元進行編輯。; 1[o] ：按下o，會跳到目前選定字元的下一位進行編輯。; 1[Esc] ：按下Esc可跳出編輯模式。; 1[Shift+:+w+q] ：可儲存修改內容。; 1[y] ：可複製內容。; 1[Ctrl+v] ：反白選取。; 常用目錄管理功能[cd] ：用來變更目前所在資料夾路徑。 1$ cd／blog ; [ls] ：用來查詢目前目錄所在的檔名與內容。 12$ ls ; $ ls -a ; (顯示隱藏檔案) atime/amin :查找n分種以前/n天以前被訪問過的所有文件。 history+時間 [mkdir] ：用來建立新的資料夾。 12$ mkdir blog ; $ rmdir ;(用來刪除目錄，但底下不可有其它目錄存在) [rm] ：清除檔案。 1234 $ rm -r folderroute ;(用來遞迴刪除資料夾下檔案)$ rm -rI folderroute ;(用來遞迴刪除資料夾下檔案，並詢問一次是否刪除) [df -h] ：用來查看總使用量。 1$ df -h ; [du -sh]+[檔案] ：用來查看檔案使用量。 1$ du -sh filename ; [cp] ：複製檔案。 將file.txt 複製到 home底下的file資料夾1$ cp /home/amyzhou/file.txt /home/file/ ; 將amyzhou目錄底下的所有file 複製到 home底下的file資料夾1$ cp -R /home/amyzhou/ /home/file/ ; 將file_a.txt 複製到 home底下的file資料夾並替換名字為file_b.txt1$ cp /home/amyzhou/file_a.txt /home/file/file_b.txt ; [chmod] ：資料夾權限更改。 更改home底下所有file的擁有者、用戶組1sudo chomod -R amyzhou:amyzhou home/file ; 1chomod a+x file_b.txt ; 權限身份：User(u)、Group(g)、Other(O)、All(a) 權限增減：加入(+)、刪除(-) 權限：Read(r)、Write(w)、execute(x) [chown] ：資料夾使用者、群組更改。 sudo chown -R User_Name File 常用開關機指令[shudown-h]：立即關機。 [init 0]：立即關機。 [init 6]：重新開機。 Service 指令查詢全部service。 1$ service --status-all ; 查詢單個服務狀態。 1$ service tomcat(service name) staus ; 開啟服務。 1$ service tomcat(service name) start ; 版本查詢查看CentOS版本 1$ cat /etc/redhat-release ; 1$ rpm -q centos-release ; 查看Ubuntu版本 1$ cat /etc/lsb-release ; 查詢電腦結構 1arch 查詢安裝套件1$ rpm -qa ; 1$ rpm -qa | grep tomcat(name) ; 硬碟掛載查看mount路徑 1$ mount or cat/etc/fstab or df -Th; 查看掛載類型 1$ df -Th; 自動掛載 1$ mount -a (執行後自動檢查 /etc/fstab下的掛載設備，若有沒掛載到的，會進行自動掛載) ubuntu16.04 自帶 python pkgpkg在 /usr/bin下 ll | grep python python3 & python-minimal (2.7.12) 1$ python --version (確認版本) 1$ apt install python-minimal 切換python版本1alias python='/usr/bin/python3' (切換版本為python3) Debian系才可使用1234567update-alternatives --display python(查看python可轉換選項)update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 (新增python可轉換選項)update-alternatives --config python (配置狀態)update-alternatives --remove python /usr/bin/python2.7 (刪除選項) 加入群組將user設定為可連ssh usermod -g groupname username (加群組) 將user加入ssh_config sudo vim /etc/ssh/sshd_config AllowUser user1 user2 重啟ssh服務 systemctl restart ssh","permalink":"http://yoursite.com/2018/11/10/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","photos":["https://securecompliance.co/wp-content/uploads/2018/03/Linux.jpg"]},{"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"title":"Linux 常用指令2","date":"2018/11/10","text":"Linux Arch 更改hostname1echo your-host-name > /etc/hostname ; 1nano /etc/hostname ; 重新開機 reboot ; 查詢使用者cat /etc/passwd awk -F’[/:]’ ‘{if ($3 >= 1000 && $3 != 65534) print $1}’ /etc/passwd 掉硬碟ls: cannot open directory .: Input/output error 參考 查詢特定portsudo lsof -i:port sudo kill PID 刪除特定時間log1.刪除n分鐘前的logll -srt |find output.log* -amin +4 | xargs rm -f 2-1.刪除昨天之前的資料(eg.2020/2/6 11:00 會刪除2020/2/4 11:00之前)ll -srt |find output.log* -mtime +1 | xargs rm -f 2-2.刪除今天之前的資料(eg.2020/2/6 11:00 會刪除2020/2/5 11:00之前)ll -srt |find output.log* -mtime +0 | xargs rm -f 查詢某進程CPU、內存 top a.查詢PIDps -ef | grep NAME b.查詢CPUtop -p PID ps-aux ps -aux | grep NAME ps -aux | grep PID cat /proc/../status cat /proc/PID/status","permalink":"http://yoursite.com/2018/11/10/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A42/","photos":["https://securecompliance.co/wp-content/uploads/2018/03/Linux.jpg"]},{"tags":[],"title":"Hello World","date":"2018/11/08","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy 底線1***$ hexo deploy*** More info: Deployment","permalink":"http://yoursite.com/2018/11/08/hello-world/","photos":["https://maxwelllai.com/img/helloworld//helloworld.jpg"]},{"tags":[{"name":"Info","slug":"Info","permalink":"http://yoursite.com/tags/Info/"}],"title":"軟體&參考文件","date":"2018/11/05","text":"密碼管理工具keePass 憑證匯入匯出憑證憑證安裝攻略 MarkDownMarkDown Tables TFSTFSIIS Grafana windows dashboard19021635 Netdata dashboardNetdatainfluxdb keel find linux apt套件sshpass Redissshpass iBookeriBooker 記憶體釋放記憶體不足 python 版本切換python 新版docker_mysql_更改密碼編碼方式mysql Ansible UIsemaphore Virtual Box 開放外部連線設定連線設定 Ubuntu加DNS設定Ubuntu加DNS設定 Hexo themehexo-theme-huhu 檔案無法刪除檔案無法刪除 大神blog佛系筆記 星艦日誌 遠端mstsc","permalink":"http://yoursite.com/2018/11/05/source/","photos":["https://securecompliance.co/wp-content/uploads/2018/03/Linux.jpg"]}]}